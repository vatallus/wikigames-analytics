// WikiGames Analytics Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Game model - stores current game data
model Game {
  id              String   @id // gameId like 'csgo', 'dota2'
  appId           String   @unique
  name            String
  type            String
  currentPlayers  Int
  peakPlayers24h  Int
  trend           String   // 'up', 'down', 'stable'
  lastUpdate      DateTime @default(now())
  
  // Enhanced data
  description     String?
  rating          Float?
  metacritic      Int?
  genres          String[] // Array of genres
  image           String?
  
  // SteamSpy data
  owners          String?
  positiveReviews Int?
  negativeReviews Int?
  userScore       Int?
  averagePlaytime Int?
  recentPlaytime  Int?
  price           String?
  tags            String[] // Array of tags
  
  // Relations
  history         PlayerHistory[]
  
  @@index([currentPlayers])
  @@index([trend])
}

// Player history - time series data
model PlayerHistory {
  id          String   @id @default(cuid())
  gameId      String
  playerCount Int
  timestamp   DateTime @default(now())
  
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@index([gameId, timestamp])
  @@index([timestamp])
}

// Country data - regional statistics
model Country {
  id          String   @id @default(cuid())
  code        String   @unique // 'USA', 'CHN', etc.
  name        String
  totalPlayers Int
  lastUpdate  DateTime @default(now())
  
  // Game-specific data stored as JSON
  gamesData   Json     // { gameId: { playerCount, playRate } }
  
  @@index([code])
}

// News and tournaments cache
model NewsCache {
  id          String   @id @default(cuid())
  type        String   // 'news' or 'tournament'
  title       String
  content     String
  url         String?
  image       String?
  date        DateTime
  game        String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  @@index([type, createdAt])
  @@index([expiresAt])
}

// API request logs for monitoring
model ApiLog {
  id          String   @id @default(cuid())
  endpoint    String
  method      String
  ip          String?
  userAgent   String?
  statusCode  Int
  responseTime Int     // in milliseconds
  timestamp   DateTime @default(now())
  
  @@index([endpoint, timestamp])
  @@index([timestamp])
}
